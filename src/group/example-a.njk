---
title: Large Screens
author: Arianna Chau
date: 2022-01-03
layout: blank
css:
  - /group/example-a.css
---
<script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.27.0/prism.min.js"></script>
<link rel="stylesheet" href="https://use.typekit.net/wlj8wil.css">

<div class="body-wrapper">
<div class="test">
  <div class="heading-wrapper wrapper">

    <img class="logo" src="/../assets/images/pleasantest-logo.svg"></img>

    <h2 class="tagline">
      Frustration-free automated UI testing in a real browser, with a familiar and intuitive syntax
    </h2>

    <div class="ctas">
      <button class="get-started">Get Started</button>
      <button class="gh">Github <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
        <path d="M1,12.27A11,11,0,0,0,8.52,22.71c.55.1.75-.24.75-.53s0-.95,0-1.87C6.2,21,5.55,18.83,5.55,18.83a2.92,2.92,0,0,0-1.22-1.61c-1-.68.08-.66.08-.66a2.28,2.28,0,0,1,1.68,1.13,2.33,2.33,0,0,0,3.2.91,2.39,2.39,0,0,1,.7-1.47c-2.44-.27-5-1.22-5-5.43a4.29,4.29,0,0,1,1.13-3,4,4,0,0,1,.11-2.91s.93-.29,3,1.13A10.92,10.92,0,0,1,12,6.59,10.92,10.92,0,0,1,14.75,7c2.1-1.42,3-1.13,3-1.13a4,4,0,0,1,.11,2.91,4.29,4.29,0,0,1,1.13,3c0,4.22-2.57,5.15-5,5.42a2.63,2.63,0,0,1,.75,2c0,1.47,0,2.66,0,3s.2.64.75.53A11,11,0,1,0,1,12.27Z"/>
      </svg>
      </button>
    </div>
    <div class="offset">
      <div class="code-wrapper">
      <pre class="code-block"><code class="language-js">test(
  'Toggle Hikes List',
  withBrowser(async ({
    screen, utils, page, user
  }) => {

  // Find the hikes button
  const hikesButton =
  await screen.getByRole(
    'button',
    { name: 'View Hikes' }
  );

  // Click it
  await user.click(aboutBtn);

  // Confirm the hikes heading is visible
  await expect(await screen.getByRole(
    heading,
    { name: 'Hikes Near You' }
  )).toBeVisible();
);</code></pre>
      </div>
    </div>
</div>
  </div>
  <div class="highlight-wrapper wrapper">
    <div class="section highlight1">
      <div class="highlight__inner">
      <h2>Test Real Use Cases in Real Browsers</h2>
        <p>Increase confidence in your code by writing tests that mimic real user behavior and running them in a real browser. When things go wrong, debug your tests using developer tools.</p>
      </div>
      <img src="https://via.placeholder.com/500">
    </div>
    <div class="section highlight2">
      <div class="highlight__inner">
        <h2>Build Inclusive UIs with Accessibility Testing Features</h2>
        <p>One-of-a-kind tools like Accessibility Tree Snapshots as well as features built into Jest and Testing Library make it easier to understand, improve, and maintain the accessibility of your interfaces.</p>
      </div>
      <img src="https://via.placeholder.com/500">
    </div>
    <div class="section highlight3">
      <div class="highlight__inner">
        <h2>Get Up to Speed Quickly With Familiar Tools</h2>
        <p>Pleasantest super-charges tools like Jest and Testing Library that you may already be familiar with, while avoiding the drawbacks of simulated browsers</p>
      </div>
      <img src="https://via.placeholder.com/500">
    </div>
  </div>
  <div class="instructions-wrapper wrapper">
    <div class="content">
      <h2 style="color: #3f6ac3">Getting Started</h2>
      <p class="intro">Follow these 5 quick steps to get up and running with Pleasantest. For more information, <a href="#">check out the documentation on GitHub.</a></p>
    </div>

    <div class="step step1">
      <div class="step__inner">
        <div class="circle"><h2>1</h2></div>
        <h3>Install Jest and Pleasantest</h3>
        <p>Pleasantest integrates with Jest tests. If you haven't set up Jest yet, <a href="#">here is Jest's getting started guide.</a></p>
        <p style="padding-top: 0">You’ll need to install Jest and Pleasantest:</p>
        <div class="offset">
          <div class="code-wrapper">
            <pre class="code-block"><code class="language-zsh">npm i -D jest pleasantest</code></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="step step2">
      <div class="step__inner">
        <div class="circle"><h2>2</h2></div>
        <h3>Write your first test</h3>
        <p>Now you’re ready to write your first test! Wrapping your test callback with <code>withBrowser</code> allows you to hook into a real browser with Pleasantest:</p>
        <div class="offset">
          <div class="code-wrapper">
          <pre class="code-block"><code class="language-js">// If you want to use module imports you’ll need to configure
// Jest and Babel to use ESM
// See https://jestjs.io/docs/getting-started#using-babel
const {withBrowser} = require('pleasantest');

test(
  'test name',
  withBrowser(async () => {
    // Your test code here
  }),
);</code></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="step step3">
      <div class="step__inner">
        <div class="circle"><h2>3</h2></div>
        <h3>Add UI markup to your test:</h3>
        <p>Once you’ve created a test there are three ways to insert markup:</p>
        <div class="offset">
          <div class="code-wrapper">
        <pre class="code-block"><code class="language-js">// For JS frameworks you can run arbitrary JavaScript
// (./app could be a .js, .jsx .ts, or .tsx file)
await utils.runJS(`
  import { App } from './app'
  import { render } from 'react-dom'

  render(< App />, document.body)
`);

// You can also insert HTML
// (This works well with templating languages)
await utils.injectHTML('<h1>Find Hikes</h1>');

// Tests can also be run by navigating to URLs within your app:
await page.goto('http://localhost:3000/hikes');</code></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="step step4">
      <div class="step__inner">
        <div class="circle"><h2>4</h2></div>
        <h3>Interact With Your App In a Real Browser</h3>
        <p>Pleasantest comes prepackaged with helpful utilities to find and interact with elements like a real user:</p>
        <div class="offset">
          <div class="code-wrapper">
            <pre class="code-block"><code class="language-js">const locationInput = await screen.getByRole( 'textbox', {
  name: 'Pick a Location'
});
const submitButton = await screen.getByRole('button', {
  name: 'Find Hikes'
});
await user.type(locationInput, 'Portland Oregon');
await user.click(submitButton);</code></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="step step5">
      <div class="step__inner">
        <div class="circle"><h2>5</h2></div>
        <h3>Make Assertions Against the DOM</h3>
        <p>Use Jest-Dom’s intuitive syntax to confirm your interface responds correctly to user actions:</p>
        <div class="offset">
          <div class="code-wrapper">
            <pre class="code-block"><code class="language-js">await expect(submitButton).toHaveFocus();
await expect(hikeResults).toBeVisible();</code></pre>
          </div>
        </div>
      </div>
    </div>
    <div class="step step6">
      <div class="step__inner">
        <div class="circle"><h2>6</h2></div>
        <h3>Run your tests</h3>
        <p>Now you can use the Jest CLI commands (link) to run your tests. The <a href="#">testTimeout</a> flag tells Jest to allow the test to run for up to 10 seconds, which is necessary for the first time Pleasantest starts the browser.</p>
        <div class="offset">
          <div class="code-wrapper">
            <pre class="code-block"><code class="language-zsh">npx jest --testTimeout=10000</code></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="footer">
  <div class="footer__inner">
    <div class="section">
      <h3>Documentation</h3>
      <ul>
        <li><a href="#">Github</a></li>
        <li><a href="#">NPM</a></li>
        <li><a href="#">Submit an Issue</a></li>
      </ul>
    </div>
    <div class="section">
      <h3>Articles</h3>
      <ul>
        <li><a href="#">Introducing Pleasantest</a></li>
        <li><a href="#">Accessibility Tree Snapshots</a></li>
      </ul>
    </div>
    <div class="section">
      <h3>Examples</h3>
      <ul>
        <li><a href="#">Testing a Reach Modal</a></li>
        <li><a href="#">Intregrating with Vite and Vue</a></li>
        <li><a href="#">Using Accessibility Tree Snapshots</a></li>
      </ul>
    </div>
      <p>Built with love by <a href="#">Cloud Four</a>
        <svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" width="80" height="80"><path d="M6.75,15.12a4.36,4.36,0,0,1-1.91-2.29,1.86,1.86,0,0,1,.52-1c0.48-.55,6.07-6.63,8.44-7.67A11.75,11.75,0,0,0,11.92,4c-7,0-7.67,5-7.67,5S0,10.3,0,14.18C0,19.73,6.84,20,6.84,20A15.3,15.3,0,0,0,9,19.92a1.29,1.29,0,0,0,.89-0.71c0.41-1,1-2.59,1.58-4.26C9.2,15.06,7,15.17,6.75,15.12Z"></path><path d="M24,13c0-4.91-4.81-5.44-4.81-5.44a6.11,6.11,0,0,0-2.14-2.2c-0.43,1.53-1.54,5.61-1.6,6.38h1.68s0.27,0,.2.33c-0.16.75-.58,2.58-1.48,2.64l-1.18.07c-0.33,1.35-.68,2.76-0.93,3.78a4.7,4.7,0,0,0,3,.91,4.59,4.59,0,0,0,3.35-1.23C24.14,17.56,24,13,24,13Z"></path><path d="M13.89,6.86A42.33,42.33,0,0,0,8.9,12l3.61-.14c0.74-2.08,1.38-3.93,1.66-4.74A0.3,0.3,0,0,0,13.89,6.86Z"></path></svg>
      </p>
    </div>
  </div>
